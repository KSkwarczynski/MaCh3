# Performs unit and integration testing

name: Validations CI

# The events that trigger the workflow
on:
  pull_request:
    branches: [ develop ]

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    name: ${{ matrix.name }}

    strategy:
      fail-fast: false  # Prevents cancellation of remaining jobs if one fails
      matrix:
        include:
          - name: Spline Validations
            first_test: Apps/SplineValidations
            second_test: empty
            third_test: empty
          - name: Covariance Validations
            first_test: Apps/CovarianceValidations
            second_test: empty
            third_test: empty

          - name: Fitter Validations
            first_test: Apps/FitterValidations
            second_test: ./bin/ProcessMCMC bin/TutorialDiagConfig.yaml MCMC_Test.root
            third_test: ./bin/DiagMCMC MCMC_Test.root bin/TutorialDiagConfig.yaml
            # TODO
            #fourth_test: bin/GetPostfitParamPlots -o MCMC_Test_Process.root -c Inputs/PlottingConfig.yaml
            #fifth_test: bin/PlotLLH -o MCMC_Test.root -c Inputs/PlottingConfig.yaml

          - name: NuMCMC Tools Validations
            first_test: Apps/NuMCMCvalidations.sh
            second_test: empty
            third_test: empty

    container:
      image: ghcr.io/mach3-software/mach3:alma9latest

    steps:
    - uses: actions/checkout@v4


    - name: Get MaCh3 Validations
      run: |
        cd /opt/
        git clone https://github.com/mach3-software/MaCh3Tutorial.git MaCh3Validations
        cd MaCh3Validations
        mkdir build
        cd build
        cmake ../ -DMaCh3_Branch=${{ github.head_ref }}

    - name: Build MaCh3 Validations
      run: |
        cd /opt/MaCh3Validations/build
        make -j4 install # Build the project

    - name: Validations
      run: |
        source /opt/MaCh3Validations/build/bin/setup.MaCh3.sh
        source /opt/MaCh3Validations/build/bin/setup.MaCh3Tutorial.sh
        cd /opt/MaCh3Validations/build
        ${{ matrix.first_test }}

        # Run the second test if it is defined
        if [[ "${{ matrix.second_test }}" != "empty" ]]; then
            echo " "
            echo "Performing Second test"
            ${{ matrix.second_test }}
        fi
        # Run the third test if it is defined
        if [[ "${{ matrix.third_test }}" != "empty" ]]; then
            echo " "
            echo "Performing Third test"
            ${{ matrix.third_test }}
        fi
